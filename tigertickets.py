#!/usr/bin/env python

#-----------------------------------------------------------------------
# tigertickets.py
#-----------------------------------------------------------------------

import requests as req
from sys import argv, stderr
from database import Database
from time import localtime, asctime, strftime
from flask import Flask, request, make_response, redirect, url_for
from flask import render_template, session
from CASClient import CASClient
import smtplib, ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os

#-----------------------------------------------------------------------

app = Flask(__name__, template_folder='templates')

# Generated by os.urandom(16)
app.secret_key = b'\xcdt\x8dn\xe1\xbdW\x9d[}yJ\xfc\xa3~/'

def testapi():
    resp = req.get("https://tigerbook.herokuapp.com/api/v1/getkey/tigertickets")
    print(resp.text)

#-----------------------------------------------------------------------

def getAmPm():
    if strftime('%p') == "AM":
        return 'morning'
    return 'afternoon'

def getCurrentTime():
    return asctime(localtime())

#-----------------------------------------------------------------------
def ampm(time):
    hour = int(str(time)[11:13])
    if hour >= 12:
        if hour > 12:
            hour = hour - 12
        return str(str(time)[0:10] + str(hour) + str(time)[13:] + " " + "PM")
    else:
        return str(str(time)[0:10] + str(hour) + str(time)[13:] + " " + "AM")
#-----------------------------------------------------------------------
@app.route('/auth', methods=['GET'])
def auth():
    html = render_template('home.html')
    response = make_response(html)
    return response
#-----------------------------------------------------------------------
@app.route('/login', methods=['GET'])
def login():
    session['username'] = CASClient().authenticate()
    # session['username'] = "js112"
    e = request.cookies.get('event')
    url = request.cookies.get('url')
    ticketsort = request.cookies.get('sort')
    return redirect(url_for('index',sort = ticketsort))

#-----------------------------------------------------------------------   
@app.route('/', methods=['GET'])
@app.route('/index', methods=['GET'])
def index():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    e = ""
    sort = request.args.get('sort')
    err= request.args.get('error')
    if err == "True":
        html = render_template('template.html', error="True")
        response = make_response(html)
        return response
    badurl = request.args.get('badurl')
    if badurl == "True":
        html = render_template('template.html', badurl="True")
        response = make_response(html)
        return response
    database = Database()
    database.connect()
    u = database.createUser(username)
    if u == False:
        html = render_template('template.html', error="True")
        response = make_response(html)
        return response
    ticketResult = database.getTickets(e, sort)
    if ticketResult[0] == False:
        html = render_template('template.html', error="True")
        response = make_response(html)
        return response
    ticketResult = ticketResult[1]
    if len(ticketResult) == 0:
        nomatch = "True"
    else:
        nomatch = "False"
    otherTickets = database.getTicketsOther(sort)
    otherTickets = otherTickets[1]
    database.disconnect()
    display = request.args.get('show')
    if display is None:
        display = False
    post = request.args.get('post')
    confirmBool = request.args.get('confirmBool')
    notif = request.args.get('notif')
    report = request.args.get('report')
    if sort is None:
        sort = ''
    html = render_template('template.html', event = formatEvent(e), tickets=ticketResult, username=username, show=str(display), post=post, confirmBool = confirmBool, notif = notif,report = report, otherTickets = otherTickets, eventreal = e, url = e, sort = sort, alltickets = "True", nomatch = nomatch)
    response = make_response(html)
    response.set_cookie('event', e)
    response.set_cookie('url', 'index')
    response.set_cookie('sort',sort)
    response.set_cookie('username', username)
    return response

#-----------------------------------------------------------------------

@app.route('/searchresults', methods=['GET'])
def input():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    e = request.args.get('event')
    sort = request.args.get('sort')
    err= request.args.get('error')
    if err == "True":
        html = render_template('template.html', error="True")
        response = make_response(html)
        return response
    database = Database()
    database.connect()
    u = database.createUser(username)
    if u == False:
        html = render_template('template.html', error="True")
        response = make_response(html)
        return response
    ticketResult = database.getTicketsSearch(e, sort)
    if ticketResult[0] == False:
        html = render_template('template.html', error="True")
        response = make_response(html)
        return response
    ticketResult = ticketResult[1]
    if len(ticketResult) == 0:
        nomatch = "True"
    else:
        nomatch = "False"
    database.disconnect()
    display = request.args.get('show')
    if display is None:
        display = False
    post = request.args.get('post')
    confirmBool = request.args.get('confirmBool')
    notif = request.args.get('notif')
    report = request.args.get('report')
    if sort is None:
        sort = ''
    if e == '':
        alltickets = "True"
    else:
        alltickets = "False"
    html = render_template('template.html', tickets=ticketResult, event = formatEvent(e), username=username, show=str(display), post=post, confirmBool = confirmBool, notif = notif, report=report, url = "searchresults", eventreal = e, sort = sort, alltickets=alltickets, nomatch = nomatch)
    response = make_response(html)
    response.set_cookie('event', e)
    response.set_cookie('url', 'input')
    response.set_cookie('sort',sort)
    return response

#-----------------------------------------------------------------------
# helper method
def formatEvent(event):
    if event == 'bac':
        event = 'BAC'
    elif event == 'bodyhype':
        event = 'BodyHype'
    elif event is None or event =='':
        event = ""
    elif event == "disiac":
        event = "Disiac"
    elif event == "expressions":
        event = "Expressions"
    elif event == "kokopops":
        event = "KoKo Pops"
    elif event == "naacho":
        event = "Naacho"
    elif event == "raqs":
        event = "Raqs"
    elif event == "six14":
        event = "Six14"
    elif event == "sympoh":
        event = "Sympoh"
    elif event == "triple8":
        event = "Triple 8"
    elif event == "butler":
        event = "Butler Broadway"
    elif event == "forbes":
        event = "Forbes Broadway"
    elif event == "mathey":
        event = "Mathey Broadway"
    elif event == "rocky":
        event = "Rocky Broadway"
    elif event == "whitman":
        event = "Whitman Broadway"
    elif event == "wilson":
        event = "Wilson Broadway"
    elif event == "highsteppers":
        event = "Highsteppers"
    elif event == "masflow":
        event = "Mas Flow"
    elif event == "ppe":
        event = "Princeton Pianists Ensemble"
    elif event == "bhangra":
        event = "Princeton Bhangra"
    elif event == "ballet":
        event = "Princeton University Ballet"
    elif event == "tapcats":
        event = "TapCats"
    elif event == "triangle":
        event = "Triangle"
    elif event == "puo":
        event = "Princeton University Orchestra"
    elif event == "footnotes":
        event = "Footnotes"
    elif event == "katzenjammers":
        event = "Katzenjammers"
    elif event == "kindredspirit":
        event = "Kindred Spirit"
    elif event == "lavie":
        event = "La Vie En Cello"
    elif event == "nassoons":
        event = "Nassoons"
    elif event == "oldnassoul":
        event = "Old NasSoul"
    elif event == "opus21":
        event = "Opus 21"
    elif event == "poco":
        event = "Princeton Opera Company"
    elif event == "r20":
        event = "Roaring 20"
    elif event == "sherekhan":
        event = "Shere Khan"
    elif event == "sinfonia":
        event = "Sinfonia"
    elif event == "tigerlilies":
        event = "Tigerlilies"
    elif event == "tigertones":
        event = "Tigertones"
    elif event == "tigressions":
        event = "Tigressions"
    elif event == "wildcats":
        event = "Wildcats"
    elif event == "fuzzydice":
        event = "Fuzzy Dice"
    elif event == "jugglingclub":
        event = "Juggling Club"
    elif event == "lobsterclub":
        event = "Lobster Club"
    elif event == "quipfire":
        event = "Quipfire!"
    elif event == "other":
        event = "Other"
    else:
        event = event
    return event

#-----------------------------------------------------------------------
# helper method
def formatEventDB(event):
    if event == 'BAC':
        event = 'bac'
    elif event == "BodyHype":
        event = "bodyhype"
    elif event == "Disiac":
        event = "disiac"
    elif event == "Expressions":
        event = "expressions"
    elif event == "KoKo Pops":
        event = "kokopops"
    elif event == "Naacho":
        event = "naacho"
    elif event == "Raqs":
        event = "raqs"
    elif event == "Six14":
        event = "six14"
    elif event == "Sympoh":
        event = "sympoh"
    elif event == "Triple 8" or event == "triple8":
        event = "triple8"
    elif event == "Butler" or event == "Butler Broadway":
        event = "butler"
    elif event == "Forbes" or event == "Forbes Broadway":
        event = "forbes"
    elif event == "Mathey" or event == "Mathey Broadway":
        event = "mathey"
    elif event == "Rocky" or event == "Rocky Broadway":
        event = "rocky"
    elif event == "Whitman" or event == "Whitman Broadway":
        event = "whitman"
    elif event == "Wilson" or event == "Wilson Broadway":
        event = "wilson"
    elif event == "Highsteppers":
        event = "highsteppers"
    elif event == "Mas Flow":
        event = "masflow"
    elif event == "PPE" or event == "Princeton Pianists Ensemble":
        event = "ppe"
    elif event == "Princeton Bhangra":
        event = "bhangra"
    elif event == "Princeton University Ballet":
        event = "ballet"
    elif event == "TapCats":
        event = "tapcats"
    elif event == "Triangle":
        event = "triangle"
    elif event == "PUO" or event == "Princeton University Orchestra":
        event = "puo"
    elif event == "Footnotes":
        event = "footnotes"
    elif event == "Katzenjammers":
        event = "katzenjammers"
    elif event == "Kindred Spirit":
        event = "kindredspirit"
    elif event == "La Vie En Cello":
        event = "lavie"
    elif event == "Nassoons":
        event = "nassoons"
    elif event == "Old NasSoul":
        event = "oldnassoul"
    elif event == "Opus 21":
        event = "opus21"
    elif event == "POCO" or event == "Princeton Opera Company":
        event = "poco"
    elif event == "Roaring 20":
        event = "r20"
    elif event == "Shere Khan":
        event = "sherekhan"
    elif event == "Sinfonia":
        event = "sinfonia"
    elif event == "Tigerlilies":
        event = "tigerlilies"
    elif event == "Tigertones":
        event = "tigertones"
    elif event == "Tigressions":
        event = "tigressions"
    elif event == "Wildcats":
        event = "wildcats"
    elif event == "Fuzzy Dice":
        event = "fuzzydice"
    elif event == "Juggling Club":
        event = "jugglingclub"
    elif event == "Lobster Club":
        event = "lobsterclub"
    elif event == "Quipfire!":
        event = "quipfire"
    elif event == "Other":
        event = "other"
    else:
        event = event
    return event
#-----------------------------------------------------------------------

@app.route('/bac', methods=['GET'])
@app.route('/bodyhype', methods=['GET'])
@app.route('/disiac', methods=['GET'])
@app.route('/expressions', methods=['GET'])
@app.route('/kokopops', methods=['GET'])
@app.route('/Naacho', methods=['GET'])
@app.route('/raqs', methods=['GET'])
@app.route('/six14', methods=['GET'])
@app.route('/sympoh', methods=['GET'])
@app.route('/triple8', methods=['GET'])
@app.route('/butler', methods=['GET'])
@app.route('/forbes', methods=['GET'])
@app.route('/mathey', methods=['GET'])
@app.route('/rocky', methods=['GET'])
@app.route('/whitman', methods=['GET'])
@app.route('/wilson', methods=['GET'])
@app.route('/highsteppers', methods=['GET'])
@app.route('/masflow', methods=['GET'])
@app.route('/ppe', methods=['GET'])
@app.route('/bhangra', methods=['GET'])
@app.route('/ballet', methods=['GET'])
@app.route('/tapcats', methods=['GET'])
@app.route('/triangle', methods=['GET'])
@app.route('/puo', methods=['GET'])
@app.route('/footnotes', methods=['GET'])
@app.route('/katzenjammers', methods=['GET'])
@app.route('/kindredspirit', methods=['GET'])
@app.route('/lavie', methods=['GET'])
@app.route('/nassoons', methods=['GET'])
@app.route('/oldnassoul', methods=['GET'])
@app.route('/opus21', methods=['GET'])
@app.route('/poco', methods=['GET'])
@app.route('/r20', methods=['GET'])
@app.route('/sherekhan', methods=['GET'])
@app.route('/sinfonia', methods=['GET'])
@app.route('/tigerlilies', methods=['GET'])
@app.route('/tigertones', methods=['GET'])
@app.route('/tigressions', methods=['GET'])
@app.route('/wildcats', methods=['GET'])
@app.route('/fuzzydice', methods=['GET'])
@app.route('/jugglingclub', methods=['GET'])
@app.route('/lobsterclub', methods=['GET'])
@app.route('/quipfire', methods=['GET'])
@app.route('/other', methods=['GET'])
def template():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    e = request.args.get('event')
    sort = request.args.get('sort')
    err= request.args.get('error')
    if err == "True":
        html = render_template('template.html', error="True")
        response = make_response(html)
        return response
    if e is None:
        e = str(request.url_rule)[1:]
    database = Database()
    database.connect()
    u = database.createUser(username)
    if u == False:
        html = render_template('template.html', error="True")
        response = make_response(html)
        return response
    if e == 'other':
        ticketResult = database.getTicketsOther(sort)
    else:
        ticketResult = database.getTickets(e, sort)
    database.disconnect()
    if ticketResult[0] == False:
        html = render_template('template.html', error="True")
        response = make_response(html)
        return response
    ticketResult = ticketResult[1]
    if len(ticketResult) == 0:
        nomatch = "True"
    else:
        nomatch = "False"
    display= request.args.get('show')
    if display is None:
        display = "False"
    post= request.args.get('post')
    confirmBool = request.args.get('confirmBool')
    notif = request.args.get('notif')
    report = request.args.get('report')
    if sort is None:
        sort = ''
    html = render_template('template.html', tickets=ticketResult, event = formatEvent(e), username = username, show = str(display), post=post, confirmBool = confirmBool, notif=notif, report=report, url = e, eventreal = e, sort = sort, alltickets="False", nomatch = nomatch)
    response = make_response(html)
    response.set_cookie('event', e)
    response.set_cookie('url', 'template')
    response.set_cookie('sort',sort)
    return response

#-----------------------------------------------------------------------
@app.route('/post', methods=['GET'])
def postform():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    database = Database()
    database.connect()
    u = database.createUser(username)
    if u == False:
        html = render_template('post.html', error="True")
        response = make_response(html)
        return response
    otherTickets = database.getTicketsOther(None)
    if otherTickets[0] == False:
        html = render_template('post.html', username = username, error = "True")
        response = make_response(html)
        return response
    otherTickets = otherTickets[1]
    database.disconnect()
    html = render_template('post.html', username = username, otherTickets=otherTickets)
    response = make_response(html)
    return response

#-----------------------------------------------------------------------
def formatDateTimeDB(date, time):
    return str(date) + str(" ") + str(time)
#-----------------------------------------------------------------------
@app.route('/addPostToDatabase', methods=['POST'])
def addPostToDatabase():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    username = username.strip()
    date = request.form.get('date')
    time = request.form.get('time')
    datetime = formatDateTimeDB(date, time)
    event = request.form.get('eventinput')
    event = formatEventDB(event)
    if event=="other":
        other = 'yes'
        event = request.form.get('otherEvent')
    else:
        other = 'no'
    price = request.form.get('price')
    type = request.form.get('type')
    if type == "Sell a Ticket":
        type = "sell"
    if type == "Exchange a Ticket":
        type = "exchange"
    description = request.form.get('description')
    status = "available"
    database = Database()
    database.connect()
    u = database.createUser(username)
    e = request.cookies.get('event')
    url = request.cookies.get('url')
    ticketsort = request.cookies.get('sort')
    if u == False:
        if e is None:
            return redirect(url_for('index', post=str(u)))
        elif url == 'template':
            return redirect(url_for('template', event=e, post=str(u)))
        else:
            return redirect(url_for(url, event=e, post=str(u)))

    success = database.addTicket(datetime, event, username, int(price), type, description, status, other)
    users =  database.getNotif(datetime, event, price, other, type)
    success = success and users[0]
    if success:
        users = users[1]
        for u in users:
            sendNotifEmail(username, u[3], [datetime, event, username, int(price), type, description, status, other])
    if e is None:
        return redirect(url_for('index', post=str(success), sort = ticketsort))
    elif url == 'template':
        return redirect(url_for('template', event=e, post=str(success), sort = ticketsort))
    else:
        return redirect(url_for(url, event=e, post=str(success)))
#-----------------------------------------------------------------------
@app.route('/claim', methods=['POST'])
def claim():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    username = username.strip()
    sellerid = request.form.get('seller')
    ticketid = request.form.get('ticketid')
    database = Database()
    database.connect()
    u = database.createUser(username)
    e = request.cookies.get('event')
    url = request.cookies.get('url')
    if u == False:
        if e is None:
            return redirect(url_for('index', show="True"))
        elif url == 'template':
            return redirect(url_for('template', event=e, show="True"))
        else:
            return redirect(url_for(url, show="True"))
    buyerid = username
    ticket = database.getTicketByID(ticketid)
    if ticket[0] == False:
        database.disconnect()
        if e is None:
            return redirect(url_for('index', show="True"))
        elif url == 'template':
            return redirect(url_for('template', event=e, show="True"))
        else:
            return redirect(url_for(url, show="True"))
    success = database.makeTransaction(sellerid, buyerid, ticketid)
    database.disconnect()
    if success == False:
        database.disconnect()
        e = request.cookies.get('event')
        url = request.cookies.get('url')
        if e is None:
            return redirect(url_for('index', show="True"))
        elif url == 'template':
            return redirect(url_for('template', event=e, show="True"))
        else:
            return redirect(url_for(url, show="True"))
    sendEmail(sellerid, buyerid, ticket[1])

    e = request.cookies.get('event')
    url = request.cookies.get('url')
    ticketsort = request.cookies.get('sort')
    if e is None:
        return redirect(url_for('index', show="Success", sort = ticketsort))
    elif url == 'template':
        return redirect(url_for('template', event=e, show="Success", sort = ticketsort))
    else:
        return redirect(url_for(url, event=e,show="Success"))
#-----------------------------------------------------------------------
@app.route('/newGroup', methods=['POST'])
def newGroup():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    username = username.strip()
    groupName = request.form.get('group')

    buyerid = username

    receiver_email = "princetonticketexchange@gmail.com"
    sender_email = "princetonticketexchange@gmail.com"
    password = os.environ["EMAIL_PW"]

    message = MIMEMultipart("alternative")
    message["Subject"] = "[TigerTickets] New Group Request!"
    message["From"] = sender_email
    message["To"] = receiver_email

    # Create the HTML version of your message
    html = """\
    <html><body><p>
        (Please make sure to click to expand the email if needed)<br>
        Dear TigerTickets,
        <br><br>
        {groupName} wish to be added to the website. </p></body>
    </html>
    """.format(groupName=groupName)
    part2 = MIMEText(html, "html")
    message.attach(part2)

    # Create secure connection with server and send email
    context = ssl.create_default_context()
    with smtplib.SMTP_SSL("smtp.sendgrid.net", 465, context=context) as server:
        server.login("apikey", os.environ["SENDGRID_KEY"])
        server.sendmail(
            sender_email, receiver_email,
            message.as_string()
        )

    e = request.cookies.get('event')
    url = request.cookies.get('url')
    if e is None:
        return redirect(url_for('index', show="groupAdded"))
    elif url == 'template':
        return redirect(url_for('template', event=e, show="groupAdded"))
    else:
        return redirect(url_for(url, show="groupAdded"))


#-----------------------------------------------------------------------
def sendEmail(sellerid, buyerid, ticket):
    # send email to seller
    sender_email = "princetonticketexchange@gmail.com"
    receiver_email = str(sellerid) + "@princeton.edu"
    password = os.environ["EMAIL_PW"]

    message = MIMEMultipart("alternative")
    message["Subject"] = "[TigerTickets] Someone has Claimed Your Ticket!"
    message["From"] = sender_email
    message["To"] = receiver_email

    s = ampm(ticket[1]);
    # Create the HTML version of your message
    html = """\
    <html>
        <body><p>
            (Please make sure to click to expand the email if needed)<br>
            Dear {sellerid},<br>
            <br> {buyerid} has claimed your ticket. It is still pending- it requires your confirmation.<br>
                Event: {event}<br>
                Date: {date}<br>
                Time: {time}<br>
                Price: ${price}<br>
                Type: {type}<br>
                Description: {description} <br>
                You can contact {buyerid} by emailing {buyerid}@princeton.edu. <br>

            Click <a href="https://tigertickets.herokuapp.com/confirm?sellerid={sellerid}&buyerid={buyerid}&ticketid={ticketid}&confirmBool=1">here</a> to confirm.<br>
Click <a href="https://tigertickets.herokuapp.com/confirm?sellerid={sellerid}&buyerid={buyerid}&ticketid={ticketid}&confirmBool=0">here</a> to reject. <br> Remember that breaching a confirmed contract can result in being banned from TigerTickets.
            <br><br>
            From, <br>
            TigerTickets <br>
        </p></body>
    </html>
    """.format(sellerid=sellerid, buyerid=buyerid, event=formatEvent(ticket[2]), date =s[0:10], time =s[10:], price=ticket[4], type=ticket[5],
               description=ticket[6], ticketid= ticket[0])

    # Turn these into plain/html MIMEText object
    part2 = MIMEText(html, "html")

    # Add HTML/plain-text parts to MIMEMultipart message
    # The email client will try to render the last part first
    message.attach(part2)

    # Create secure connection with server and send email
    context = ssl.create_default_context()
    with smtplib.SMTP_SSL("smtp.sendgrid.net", 465, context=context) as server:
        server.login("apikey", os.environ["SENDGRID_KEY"])
        server.sendmail(
            sender_email, receiver_email,
            message.as_string()
        )

    # send email to buyer:
    sender_email = "princetonticketexchange@gmail.com"
    receiver_email = buyerid + "@princeton.edu"
    password = os.environ["EMAIL_PW"]

    message = MIMEMultipart("alternative")
    message["Subject"] = "[TigerTickets] Ticket Confirmation"
    message["From"] = sender_email
    message["To"] = receiver_email

    # Create the HTML version of your message
    html2 = """\
    <html>
        <body><p>
            (Please make sure to click to expand the email if needed)<br>
            Dear {buyerid},<br>
            <br> This is a confirmation of the ticket you claimed. It is still pending and requires {sellerid} to confirm. <br>
                Seller: {sellerid} <br>
                Event: {event}<br>
                Date: {date}<br>
                Time: {time}<br>
                Price: ${price}<br>
                Type: {type}<br>
                Description: {description} <br><br>

            From, <br>
            TigerTickets <br>
    </p></body>
    </html>
    """.format(buyerid=buyerid, sellerid=sellerid, event=formatEvent(ticket[2]), date = s[0:10], time=s[10:], price=ticket[4], type=ticket[5],
               description=ticket[6])
    # Turn these into plain/html MIMEText object
    part2 = MIMEText(html2, "html")

    # Add HTML/plain-text parts to MIMEMultipart message
    # The email client will try to render the last part first
    message.attach(part2)

    # Create secure connection with server and send email
    context = ssl.create_default_context()
    with smtplib.SMTP_SSL("smtp.sendgrid.net", 465, context=context) as server:
        server.login("apikey", os.environ["SENDGRID_KEY"])
        server.sendmail(
            sender_email, receiver_email,
            message.as_string())



#-----------------------------------------------------------------------
@app.route('/confirm')
def confirm():
    username = CASClient().authenticate()
    username = username.strip()
    sellerid = request.args.get('sellerid')
    #sellerid = "js112"
    username = sellerid
    ticketid = request.args.get('ticketid')
    buyerid = request.args.get('buyerid')
    # buyerid = "shyoo"
    confirmBool = request.args.get('confirmBool')
    e = request.cookies.get('event')
    url = request.cookies.get('url')

    if (username == sellerid):
        database = Database()
        database.connect()
        u = database.createUser(username)
        if u == False:
            return redirect(url_for('index', error = "True"))
        if int(confirmBool) == 1:
            success = database.completeTransaction(sellerid, buyerid, ticketid)
        else:
            success = database.rejectTransaction(sellerid, ticketid)[0]
        if success == False:
            return redirect(url_for('index', badurl = "True"))
        ticket = database.getTicketByID(ticketid)
        if ticket[0] == False:
            return redirect(url_for('index', error = "True"))
        database.disconnect()
        ticket=ticket[1]
        sendFinalConfirmEmail(sellerid, buyerid, ticket, confirmBool)
    else:
        return redirect(url_for('index', error = "True"))

    return redirect(url_for('index', confirmBool= confirmBool))


#-----------------------------------------------------------------------
def sendFinalConfirmEmail(sellerid, buyerid, ticket,confirmBool):
    # send email to seller
    sender_email = "princetonticketexchange@gmail.com"
    receiver_email = str(sellerid) + "@princeton.edu"
    password = os.environ["EMAIL_PW"]

    message = MIMEMultipart("alternative")
    message["From"] = sender_email
    message["To"] = receiver_email

    s = ampm(ticket[1]);
    if (int(confirmBool) == 0):
        message["Subject"] = "[TigerTickets] You Rejected this Transaction!"
        html = """\
        <html>
            <body><p>
                (Please make sure to click to expand the email if needed)<br>
                Dear {sellerid},<br>
                <br> This is your confirmation that {buyerid} has claimed your ticket, but you have decided to ultimately reject it. <br>
                    Event: {event}<br>
                    Date: {date}<br>
                    Time: {time}<br>
                    Price: ${price}<br>
                    Type: {type}<br>
                    Description: {description} <br>
                <br> Note that this ticket will continue to remain on the website as available until you remove it.

                From, <br>
                TigerTickets <br></p>
            </body>
        </html>
        """.format(sellerid=sellerid, buyerid=buyerid, event=formatEvent(ticket[2]),date = s[0:10], time=s[10:], price=ticket[4], type=ticket[5],
               description=ticket[6])
    elif (int(confirmBool) == 1):
            message["Subject"] = "[TigerTickets] Your Transaction is Confirmed!"
            # Create the HTML version of your message
            html = """\
            <html>
            <body><p>
                (Please make sure to click to expand the email if needed)<br>
                Dear {sellerid},<br>
                <br> This is your confirmation that {buyerid} has claimed your ticket and you have confirmed. <br>
                    Event: {event}<br>
                    Date: {date}<br>
                    Time: {time}<br>
                    Price: ${price}<br>
                    Type: {type}<br>
                    Description: {description} <br>
                     Please contact {buyerid} by emailing {buyerid}@princeton.edu as soon as possible as the event may be coming up soon. A breach of this contract can result in being banned from TigerTickets website. <br>

                From, <br>
                TigerTickets <br>
            </p></body>
        </html>
        """.format(sellerid=sellerid, buyerid=buyerid, event=formatEvent(ticket[2]),date = s[0:10], time=s[10:], price=ticket[4], type=ticket[5],
               description=ticket[6])
    else:
        message["Subject"] = "[TigerTickets] The Buyer Canceled this Claim!"
        html = """\
        <html>
            <body><p>
                (Please make sure to click to expand the email if needed)<br>
                Dear {sellerid},<br>
                <br> {buyerid} has claimed your ticket, but unfortunately {buyerid} have decided to cancel it. <br>
                    Event: {event}<br>
                    Date: {date} <br>
                    Time: {time}<br>
                    Price: ${price}<br>x
                    Type: {type}<br>
                    Description: {description} <br>
                <br> Note that this ticket will continue to remain on the website as available until you remove it.

                From, <br>
                TigerTickets <br></p>
            </body>
        </html>
        """.format(sellerid=sellerid, buyerid=buyerid, event=formatEvent(ticket[2]),date = s[0:10], time=s[10:], price=ticket[4], type=ticket[5], description=ticket[6])
    # Turn these into plain/html MIMEText object
    part2 = MIMEText(html, "html")

    # Add HTML/plain-text parts to MIMEMultipart message
    # The email client will try to render the last part first
    message.attach(part2)

    # Create secure connection with server and send email
    context = ssl.create_default_context()
    with smtplib.SMTP_SSL("smtp.sendgrid.net", 465, context=context) as server:
        server.login("apikey", os.environ["SENDGRID_KEY"])
        server.sendmail(
            sender_email, receiver_email,
            message.as_string()
        )

    # send email to buyer:
    sender_email = "princetonticketexchange@gmail.com"
    receiver_email = buyerid + "@princeton.edu"
    password = os.environ["EMAIL_PW"]

    message = MIMEMultipart("alternative")
    message["From"] = sender_email
    message["To"] = receiver_email
    # Create the HTML version of your message
    html2 = """\
    <html>
        <body><p>
            (Please make sure to click to expand the email if needed)<br>
            Dear {buyerid},<br>
            <br> This is a confirmation that the ticket you claimed has been accepted by {sellerid}.<br>
                Seller: {sellerid}<br>
                Event: {event}<br>
                Date: {date} <br>
                Time: {time}<br>
                Price: ${price}<br>
                Type: {type}<br>
                Description: {description} <br>
                If {sellerid} does not contact you in the next 24 hours, feel free to reach out to {sellerid} by emailing {sellerid}@princeton.edu. If {sellerid} does not contact you before the event, please let TigerTickets know so that we can deal appropriately with the seller. Note that not following through with your claim can result in being banned from TigerTickets. <br>

            From, <br>
            TigerTickets <br>
        </p></body>
    </html>
    """.format(buyerid=buyerid, sellerid=sellerid, event=formatEvent(ticket[2]),date = s[0:10], time=s[10:], price=ticket[4], type=ticket[5],
               description=ticket[6])
    if (int(confirmBool) == 0):
        message["Subject"] = "[TigerTickets] Your Claim was Rejected!"
        html2 = """\
        <html>
            <body><p>
                (Please make sure to click to expand the email if needed)<br>
                Dear {buyerid},<br>
                <pr> Unfortunately, {sellerid} has rejected your ticket claim for: <br>
                    Event: {event}<br>
                    Date: {date}<br>
                    Time: {time}<br>
                    Price: {price}<br>
                    Type: {type}<br>
                    Description: {description} <br>

                From, <br>
                TigerTickets <br>
            </p></body>
        </html>
        """.format(sellerid=sellerid, buyerid=buyerid, event=formatEvent(ticket[2]),date = s[0:10], time=s[10:], price=ticket[4], type=ticket[5],
               description=ticket[6])
    elif (int(confirmBool) == 1):
        message["Subject"] = "[TigerTickets] Transaction Confirmation"

        # Create the HTML version of your message
        html2 = """\
        <html>
            <body><p>
                (Please make sure to click to expand the email if needed)<br>
                Dear {buyerid},<br>
                <br> This is a confirmation that the ticket you claimed has been accepted by {sellerid}.<br>
                    Seller: {sellerid}<br>
                    Event: {event}<br>
                    Date: {date}<br>
                    Time: {time}<br>
                    Price: ${price}<br>
                    Type: {type}<br>
                    Description: {description} <br>
                    If {sellerid} does not contact you in the next 24 hours, feel free to reach out to {sellerid} by emailing {sellerid}@princeton.edu. If {sellerid} does not contact you before the event, please let TigerTickets know so that we can deal appropriately with the seller. Note that not following through with your claim can result in being banned from TigerTickets. <br>

                From, <br>
                TigerTickets <br>
            </p></body>
        </html>
        """.format(buyerid=buyerid, sellerid=sellerid, event=formatEvent(ticket[2]), date = s[0:10], time=s[10:], price=ticket[4], type=ticket[5],
               description=ticket[6])
    else:
        message["Subject"] = "[TigerTickets] Your Claim was Canceled!"
        html2 = """\
        <html>
            <body><p>
                (Please make sure to click to expand the email if needed)<br>
                Dear {buyerid},<br>
                <pr> This is a confirmation that your ticket claim for the following ticket has been canceled: <br>
                    Event: {event}<br>
                    Date: {date}<br>
                    Time: {time}<br>
                    Price: {price}<br>
                    Type: {type}<br>
                    Description: {description} <br>

                From, <br>
                TigerTickets <br>
            </p></body>
        </html>
        """.format(sellerid=sellerid, buyerid=buyerid, event=formatEvent(ticket[2]),date =s[0:10], time=s[10:], price=ticket[4], type=ticket[5],
           description=ticket[6])

    # Turn these into plain/html MIMEText object
    part2 = MIMEText(html2, "html")

    # Add HTML/plain-text parts to MIMEMultipart message
    # The email client will try to render the last part first
    message.attach(part2)

    # Create secure connection with server and send email
    context = ssl.create_default_context()
    with smtplib.SMTP_SSL("smtp.sendgrid.net", 465, context=context) as server:
        server.login("apikey", os.environ["SENDGRID_KEY"])
        server.sendmail(
            sender_email, receiver_email,
            message.as_string())


#-----------------------------------------------------------------------
@app.route('/user', methods=['GET'])
def user():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    err= request.args.get('error')
    if err == "True":
        html = render_template('user.html', error="True")
        response = make_response(html)
        return response
    username = username.strip()
    database = Database()
    database.connect()
    u = database.createUser(username)
    if u == False:
        html = render_template('user.html', error="True", activesell = "active")
        response = make_response(html)
        return response
    ticketResult = database.getUserTicket(username)
    if ticketResult[0] == False:
        html = render_template('user.html', error="True", activesell = "active")
        response = make_response(html)
        return response
    ticketResult = ticketResult[1]
    database.disconnect()
    display = request.args.get('show')
    if display is None:
        display = ""
    post = request.args.get('post')
    confirmBool = request.args.get('confirmBool')
    notif = request.args.get('notif')
    report = request.args.get('report')
    edit = request.args.get('edit')
    html = render_template('user.html', tickets=ticketResult, username = username, activesell = "active", show=str(display), post=post, confirmBool = confirmBool, notif=notif, report=report, edit =edit)
    response = make_response(html)
    response.set_cookie('url', 'user')
    return response

#-----------------------------------------------------------------------
@app.route('/userbuy', methods=['GET'])
def userbuy():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    err= request.args.get('error')
    if err == "True":
        html = render_template('userbuy.html', error="True")
        response = make_response(html)
        return response
    username = username.strip()
    database = Database()
    database.connect()
    u = database.createUser(username)
    if u == False:
        html = render_template('userbuy.html', error="True", activebuy = "active")
        response = make_response(html)
        return response
    ticketResult = database.getUserTicketsBuy(username)
    if ticketResult[0] == False:
        html = render_template('userbuy.html', error="True", activebuy = "active")
        response = make_response(html)
        return response
    ticketResult = ticketResult[1]
    database.disconnect()
    display = request.args.get('show')
    if display is None:
        display = False
    post = request.args.get('post')
    confirmBool = request.args.get('confirmBool')
    notif = request.args.get('notif')
    report = request.args.get('report')
    delete = request.args.get('delete')
    html = render_template('userbuy.html', tickets=ticketResult, username = username, activebuy = "active", show=str(display), post=post, confirmBool = confirmBool, notif = notif,report=report, delete = delete)
    response = make_response(html)
    response.set_cookie('url', 'userbuy')
    return response
#-----------------------------------------------------------------------
@app.route('/usernotif', methods=['GET'])
def usernotif():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    err= request.args.get('error')
    if err == "True":
        html = render_template('usernotif.html', error="True")
        response = make_response(html)
        return response
    username = username.strip()
    database = Database()
    database.connect()
    u = database.createUser(username)
    if u == False:
        html = render_template('usernotif.html', error="True", activenotif = "active")
        response = make_response(html)
        return response
    results = database.getUserNotifs(username)
    if results[0] == False:
        html = render_template('usernotif.html', error="True", activenotif = "active")
        response = make_response(html)
        return response
    results = results[1]
    database.disconnect()
    display = request.args.get('show')
    if display is None:
        display = "Success"
    post = request.args.get('post')
    confirmBool = request.args.get('confirmBool')
    notif = request.args.get('notif')
    report = request.args.get('report')
    html = render_template('usernotif.html', tickets=results, username = username, activenotif = "active", show=str(display), post=post, confirmBool = confirmBool, notif = notif, report=report)
    response = make_response(html)
    response.set_cookie('url', 'usernotif')
    return response
#-----------------------------------------------------------------------
@app.route('/delete', methods=['POST'])
def deleteTicket():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    username = username.strip()
    sellerid = request.form.get('seller')
    ticketid = request.form.get('ticketid')
    status = request.form.get('status')
    database = Database()
    database.connect()
    u = database.createUser(username)
    if u == False:
        return redirect(url_for('user', error="True"))
    buyerid = username
    ticket = database.getTicketByID(ticketid)
    if ticket[0] == False:
        return redirect(url_for('user', show="False"))
    if status == "pending":
        buyerid = database.rejectTransaction(sellerid, ticketid)
        if buyerid[0] == False:
            return redirect(url_for('user', show="False"))
        buyerid= buyerid[1]
        ticket = ticket[1]
        success = database.removeTicket(ticketid)
        if success == False:
            return redirect(url_for('user', show="False"))
        sendFinalConfirmEmail(sellerid, buyerid, ticket, 0)
    elif status =="available":
        ticket = ticket[1]
        success = database.removeTicket(ticketid)
        if success == False:
            return redirect(url_for('user', show="False"))

    database.disconnect()


    return redirect(url_for('user', show="True"))

#-----------------------------------------------------------------------
@app.route('/deleteclaim', methods=['POST'])
def deleteClaim():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    username = username.strip()
    sellerid = request.form.get('seller')
    ticketid = request.form.get('ticketid')
    status = request.form.get('status')
    database = Database()
    database.connect()
    u = database.createUser(username)
    if u == False:
        return redirect(url_for('userbuy', error="True"))
    buyerid = username
    ticket = database.getTicketByID(ticketid)
    if ticket[0] == False:
        return redirect(url_for('userbuy', delete = "False"))

    sellerid = database.rejectTransaction(sellerid, ticketid)
    if sellerid[0] == False:
        return redirect(url_for('userbuy', delete = "False"))
    sellerid= sellerid[2]
    ticket = ticket[1]
    sendFinalConfirmEmail(sellerid, buyerid, ticket, 2)
    database.disconnect()

    return redirect(url_for('userbuy', delete = "True"))
#-----------------------------------------------------------------------
@app.route('/deletenotif', methods=['POST'])
def deleteNotif():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    username = username.strip()
    notificationid = request.form.get('notificationid')
    database = Database()
    database.connect()
    u = database.createUser(username)
    if u == False:
        return redirect(url_for('usernotif', error="True"))
    buyerid = username
    success = database.removeNotif(notificationid)
    database.disconnect()
    if success == False:
        return redirect(url_for('usernotif', show="False"))
    return redirect(url_for('usernotif', show="True"))
#-----------------------------------------------------------------------
@app.route('/notify', methods=['GET'])
def notifyform():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    database = Database()
    database.connect()
    u = database.createUser(username)
    if u == False:
        html = render_template('notify.html', username = username, error = "True")
        response = make_response(html)
        return response
    otherTickets = database.getTicketsOther(None)
    if otherTickets[0] == False:
        html = render_template('notify.html', username = username, error = "True")
        response = make_response(html)
        return response
    otherTickets = otherTickets[1]
    database.disconnect()
    html = render_template('notify.html', username = username, otherTickets=otherTickets)
    response = make_response(html)
    return response

#-----------------------------------------------------------------------
@app.route('/report', methods=['GET'])
def reportform():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    database = Database()
    database.connect()
    u = database.createUser(username)
    if u == False:
        html = render_template('report.html', username = username, error = "True")
        response = make_response(html)
        return response
    otherTickets = database.getTicketsOther(None)
    if otherTickets[0] == False:
        html = render_template('report.html', username = username, error = "True")
        response = make_response(html)
        return response
    database.disconnect()
    html = render_template('report.html', username = username)
    response = make_response(html)
    return response

#-----------------------------------------------------------------------
@app.route('/postnotification', methods=['POST'])
def notify():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    username = username.strip()
    date = request.form.get('date')
    time = request.form.get('time')
    datetime = formatDateTimeDB(date, time)
    event = request.form.get('eventinput')
    event = formatEventDB(event)
    if event=="other":
        other = 'yes'
        event = request.form.get('otherEvent')
    else:
        other = 'no'
    price = request.form.get('price')
    type = request.form.get('type')
    if type == "Both":
        type = "buy/exchange"
    elif type == "Buy a Ticket":
        type = "buy"
    else:
        type = "exchange"
    status = "active"
    database = Database()
    database.connect()
    u = database.createUser(username)
    e = request.cookies.get('event')
    url = request.cookies.get('url')
    ticketsort = request.cookies.get('sort')
    if u == False:
        if e is None:
            return redirect(url_for('index', notif=str(u)))
        elif url == 'template':
            return redirect(url_for('template', event=e, notif=str(u)))
        else:
            return redirect(url_for(url, event=e, notif=str(u)))
    success = database.addNotif(datetime, event, username, price, status, other, type)
    if success == False:
        if e is None:
            return redirect(url_for('index', notif=str(success)))
        elif url == 'template':
            return redirect(url_for('template', event=e, notif=str(success)))
        else:
            return redirect(url_for(url, event=e, notif=str(success)))
    ticket =  database.getTicketsNotif(datetime, event, price, other, type)
    success = ticket[0]
    if success:
        if not ticket[1] is None:
            ticket = ticket[1]
            sendNotifEmail(username, ticket[3], ticket[1:8])

    if e is None:
        return redirect(url_for('index', notif=str(success), sort = ticketsort))
    elif url == 'template':
        return redirect(url_for('template', event=e, notif=str(success), sort = ticketsort))
    else:
        return redirect(url_for(url, event=e, notif=str(success)))
#-----------------------------------------------------------------------
@app.route('/postreport', methods=['POST'])
def report():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    username = username.strip()
    reportid = request.form.get('reportid')
    report = request.form.get('report')
    bug = ""
    database = Database()
    database.connect()
    u = database.createUser(username)
    e = request.cookies.get('event')
    url = request.cookies.get('url')
    ticketsort = request.cookies.get('sort')
    if u == False:
        if e is None:
            return redirect(url_for('index', report=str(u)))
        elif url == 'template':
            return redirect(url_for('template', event=e, report=str(u)))
        else:
            return redirect(url_for(url, event=e, report=str(u)))
    success = database.addReport(reportid, report, bug)
    if success:
        sendReportEmail(username, reportid, report, bug)
    e = request.cookies.get('event')
    url = request.cookies.get('url')
    if e is None:
        return redirect(url_for('index', report=str(success), sort = ticketsort))
    elif url == 'template':
        return redirect(url_for('template', event=e, report=str(success), sort = ticketsort))
    else:
        return redirect(url_for(url, event=e, report=str(success)))

#-----------------------------------------------------------------------
@app.route('/postbugreport', methods=['POST'])
def bugreport():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    username = username.strip()
    reportid = ""
    report = ""
    bug = request.form.get('bug')
    database = Database()
    database.connect()
    u = database.createUser(username)
    e = request.cookies.get('event')
    url = request.cookies.get('url')
    ticketsort = request.cookies.get('sort')
    if u == False:
        if e is None:
            return redirect(url_for('index', report=str(u)))
        elif url == 'template':
            return redirect(url_for('template', event=e, report=str(u)))
        else:
            return redirect(url_for(url, event=e, report=str(u)))
    success = database.addReport(reportid, report, bug)
    if success:
        sendReportEmail(username, reportid, report, bug)
    e = request.cookies.get('event')
    url = request.cookies.get('url')
    if e is None:
        return redirect(url_for('index', report=str(success), sort = ticketsort))
    elif url == 'template':
        return redirect(url_for('template', event=e, report=str(success), sort = ticketsort))
    else:
        return redirect(url_for(url, event=e, report=str(success)))

#-----------------------------------------------------------------------
def sendReportEmail(username, reportid, report, bug):
    # send email to seller
    sender_email = "princetonticketexchange@gmail.com"
    receiver_email = "princetonticketexchange@gmail.com"
    password = os.environ["EMAIL_PW"]

    message = MIMEMultipart("alternative")
    message["Subject"] = "[TigerTickets] Someone reported a user/bug!"
    message["From"] = sender_email
    message["To"] = receiver_email

    # Create the HTML version of your message
    html = """\
    <html>
        <body><p>
            (Please make sure to click to expand the email if needed)<br>
            Dear TigerTickets,<br>
            <br> {username} reported the following user/bug/issue. <br>
 Reported User: {reportid}<br>
                Report: {report}<br>
                Bug: {bug}<br>
        </p></body>
    </html>
    """.format(username=username, reportid=reportid, report=report, bug=bug)

    # Turn these into plain/html MIMEText object
    part2 = MIMEText(html, "html")

    # Add HTML/plain-text parts to MIMEMultipart message
    # The email client will try to render the last part first
    message.attach(part2)

    # Create secure connection with server and send email
    context = ssl.create_default_context()
    with smtplib.SMTP_SSL("smtp.sendgrid.net", 465, context=context) as server:
        server.login("apikey", os.environ["SENDGRID_KEY"])
        server.sendmail(
            sender_email, receiver_email,
            message.as_string()
        )
#-----------------------------------------------------------------------
def sendNotifEmail(sellerid, buyerid, ticket):
    # send email to seller
    sender_email = "princetonticketexchange@gmail.com"
    receiver_email = str(buyerid) + "@princeton.edu"
    password = os.environ["EMAIL_PW"]

    message = MIMEMultipart("alternative")
    message["Subject"] = "[TigerTickets] A Ticket that you want is Available on TigerTickets!"
    message["From"] = sender_email
    message["To"] = receiver_email

    s = ampm(ticket[0]);

    # Create the HTML version of your message
    html = """\
    <html>
        <body><p>
            (Please make sure to click to expand the email if needed)<br>
            Dear {buyerid},<br>
            <br> A ticket that you want is available on TigerTickets. <br>
                Event: {event}<br>
                Date: {date}<br>
                Time: {time}<br>
                Price: ${price}<br>
                Type: {type}<br>
                Description: {description} <br>
                Click <a href="https://tigertickets.herokuapp.com/">here</a> to navigate to TigerTickets.<br>
            <br><br>
            From, <br>
            TigerTickets <br>
        </p></body>
    </html>
    """.format(sellerid=sellerid, buyerid=buyerid, event=formatEvent(ticket[1]), date = s[0:10], time=s[10:], price=ticket[3], type=ticket[4],
               description=ticket[5])

    # Turn these into plain/html MIMEText object
    part2 = MIMEText(html, "html")

    # Add HTML/plain-text parts to MIMEMultipart message
    # The email client will try to render the last part first
    message.attach(part2)

    # Create secure connection with server and send email
    context = ssl.create_default_context()
    with smtplib.SMTP_SSL("smtp.sendgrid.net", 465, context=context) as server:
        server.login("apikey", os.environ["SENDGRID_KEY"])
        server.sendmail(
            sender_email, receiver_email,
            message.as_string()
        )
#-----------------------------------------------------------------------
@app.route('/editpost', methods=['POST'])
def editpost():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    username = username.strip()
    ticketid = request.form.get('ticketid')
    database = Database()
    database.connect()
    u = database.createUser(username)
    if u == False:
        return redirect(url_for('user', error=str(u)))
    success = database.getTicketByID(ticketid)
    if success[0] == False:
        return redirect(url_for('user', error=str(success)))
    else:
        ticket = success[1]

    type = ticket[5]
    if type == "sell":
        type = "Sell a Ticket"
    else:
        type = "Exchange a Ticket"

    other = ticket[8]
    if other == "yes":
        event = "Other"
    else:
        event = ticket[2]
    html = render_template('edit.html', ticketid = ticket[0], event = formatEvent(ticket[2]), other = other, othereventname = ticket[2], type = type, date = ticket[1][0:10], time = ticket[1][11:], description = ticket[6], price = ticket[4])
    response = make_response(html)
    return response

#-----------------------------------------------------------------------
@app.route('/edit', methods=['POST'])
def edit():
    if 'username' in session:
        username = session.get('username')
    else:
        return redirect(url_for('auth'))
    username = username.strip()
    ticketid = request.form.get('ticketid')
    date = request.form.get('date')
    time = request.form.get('time')
    datetime = formatDateTimeDB(date, time)
    event = request.form.get('eventinput')
    event = formatEventDB(event)
    if event=="other":
        other = 'yes'
        event = request.form.get('otherEvent')
    else:
        other = 'no'
    price = request.form.get('price')
    type = request.form.get('type')
    if type == "Sell a Ticket":
        type = "sell"
    if type == "Exchange a Ticket":
        type = "exchange"
    description = request.form.get('description')
    status = "available"
    database = Database()
    database.connect()
    u = database.createUser(username)
    e = request.cookies.get('event')
    url = request.cookies.get('url')
    ticketsort = request.cookies.get('sort')
    if u == False:
        return redirect(url_for('user', edit=str(u)))
    success = database.editTicket(ticketid, datetime, event, username, int(price), type, description, status, other)
    users =  database.getNotif(datetime, event, price, other, type)
    success = success and users[0]
    if success:
        users = users[1]
        for u in users:
            sendNotifEmail(username, u[3], [datetime, event, username, int(price), type, description, status, other])
    return redirect(url_for('user', edit="True"))

#-----------------------------------------------------------------------
@app.route('/about', methods=['GET'])
def about():
    if 'username' in session:
        loggedin = "True"
    else:
        loggedin = "False"
    err= request.args.get('error')
    display = request.args.get('show')
    if display is None:
        display = ""
    post = request.args.get('post')
    confirmBool = request.args.get('confirmBool')
    notif = request.args.get('notif')
    report = request.args.get('report')
    edit = request.args.get('edit')
    html = render_template('about.html', error = str(err), show = str(display), post = str(post), confirmBool =confirmBool, notif = str(notif), report = str(report), edit = str(edit), loggedin = loggedin)
    response = make_response(html)
    response.set_cookie('url', 'about')
    return response
#-----------------------------------------------------------------------
@app.route('/help', methods=['GET'])
def help():
    if 'username' in session:
        loggedin = "True"
    else:
        loggedin = "False"
    err= request.args.get('error')
    display = request.args.get('show')
    if display is None:
        display = ""
    post = request.args.get('post')
    confirmBool = request.args.get('confirmBool')
    notif = request.args.get('notif')
    report = request.args.get('report')
    edit = request.args.get('edit')
    html = render_template('help.html', error = str(err), show = str(display), post = str(post), confirmBool =confirmBool, notif = str(notif), report = str(report), edit = str(edit), loggedin = loggedin)
    response = make_response(html)
    response.set_cookie('url', 'help')
    return response

#-----------------------------------------------------------------------
@app.route('/logout', methods=['GET'])
def logout():
    casClient = CASClient()
    casClient.authenticate()
    casClient.logout()
    
#-----------------------------------------------------------------------
if __name__ == '__main__':
    if len(argv) != 2:
        print('Usage: ' + argv[0] + ' port')
        exit(1)
    app.run(host='0.0.0.0', port=int(argv[1]), debug=True)
